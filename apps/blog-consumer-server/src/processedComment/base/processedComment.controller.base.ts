/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedCommentService } from "../processedComment.service";
import { ProcessedCommentCreateInput } from "./ProcessedCommentCreateInput";
import { ProcessedComment } from "./ProcessedComment";
import { ProcessedCommentFindManyArgs } from "./ProcessedCommentFindManyArgs";
import { ProcessedCommentWhereUniqueInput } from "./ProcessedCommentWhereUniqueInput";
import { ProcessedCommentUpdateInput } from "./ProcessedCommentUpdateInput";

export class ProcessedCommentControllerBase {
  constructor(protected readonly service: ProcessedCommentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedComment })
  async createProcessedComment(
    @common.Body() data: ProcessedCommentCreateInput
  ): Promise<ProcessedComment> {
    return await this.service.createProcessedComment({
      data: data,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        postTitle: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedComment] })
  @ApiNestedQuery(ProcessedCommentFindManyArgs)
  async processedComments(
    @common.Req() request: Request
  ): Promise<ProcessedComment[]> {
    const args = plainToClass(ProcessedCommentFindManyArgs, request.query);
    return this.service.processedComments({
      ...args,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        postTitle: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedComment(
    @common.Param() params: ProcessedCommentWhereUniqueInput
  ): Promise<ProcessedComment | null> {
    const result = await this.service.processedComment({
      where: params,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        postTitle: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedComment(
    @common.Param() params: ProcessedCommentWhereUniqueInput,
    @common.Body() data: ProcessedCommentUpdateInput
  ): Promise<ProcessedComment | null> {
    try {
      return await this.service.updateProcessedComment({
        where: params,
        data: data,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          postTitle: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedComment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedComment(
    @common.Param() params: ProcessedCommentWhereUniqueInput
  ): Promise<ProcessedComment | null> {
    try {
      return await this.service.deleteProcessedComment({
        where: params,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          postTitle: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
