/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedComment } from "./ProcessedComment";
import { ProcessedCommentCountArgs } from "./ProcessedCommentCountArgs";
import { ProcessedCommentFindManyArgs } from "./ProcessedCommentFindManyArgs";
import { ProcessedCommentFindUniqueArgs } from "./ProcessedCommentFindUniqueArgs";
import { CreateProcessedCommentArgs } from "./CreateProcessedCommentArgs";
import { UpdateProcessedCommentArgs } from "./UpdateProcessedCommentArgs";
import { DeleteProcessedCommentArgs } from "./DeleteProcessedCommentArgs";
import { ProcessedCommentService } from "../processedComment.service";
@graphql.Resolver(() => ProcessedComment)
export class ProcessedCommentResolverBase {
  constructor(protected readonly service: ProcessedCommentService) {}

  async _processedCommentsMeta(
    @graphql.Args() args: ProcessedCommentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedComment])
  async processedComments(
    @graphql.Args() args: ProcessedCommentFindManyArgs
  ): Promise<ProcessedComment[]> {
    return this.service.processedComments(args);
  }

  @graphql.Query(() => ProcessedComment, { nullable: true })
  async processedComment(
    @graphql.Args() args: ProcessedCommentFindUniqueArgs
  ): Promise<ProcessedComment | null> {
    const result = await this.service.processedComment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedComment)
  async createProcessedComment(
    @graphql.Args() args: CreateProcessedCommentArgs
  ): Promise<ProcessedComment> {
    return await this.service.createProcessedComment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedComment)
  async updateProcessedComment(
    @graphql.Args() args: UpdateProcessedCommentArgs
  ): Promise<ProcessedComment | null> {
    try {
      return await this.service.updateProcessedComment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedComment)
  async deleteProcessedComment(
    @graphql.Args() args: DeleteProcessedCommentArgs
  ): Promise<ProcessedComment | null> {
    try {
      return await this.service.deleteProcessedComment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
